define compile_rules
@echo + $(2)
@mkdir -p $(1)
@$(CC) $(2) -o $(3) $(4)
endef

#make_common_rules(
# 1       2           3         4
# target, c_ex_flags, ld_flags, ex_files_depended,
# 5                  6         7
# specified_src_dir, ex_rules, specified_rules)
define make_common_rules
ifeq ($(5),)
	$(1)_SRC_DIR := $(1)/src
else
	$(1)_SRC_DIR := $(5)
endif
$(1)_INC_DIR := $(1)/include
$(1)_OBJ_DIR := obj/$(1)

$(1)_CFILES := $$(shell find $$($(1)_SRC_DIR) -name "*.c")
$(1)_SFILES := $$(shell find $$($(1)_SRC_DIR) -name "*.S")

$(1)_COBJS := $$(patsubst $$($(1)_SRC_DIR)%.c, $$($(1)_OBJ_DIR)%.o, $$($(1)_CFILES))
$(1)_SOBJS := $$(patsubst $$($(1)_SRC_DIR)%.S, $$($(1)_OBJ_DIR)%.o, $$($(1)_SFILES))

$(1)_OBJS := $$($(1)_SOBJS) $$($(1)_COBJS)

$(1)_BIN := $$($(1)_OBJ_DIR)/$(1)

$(1)_CFLAGS := -c -m32 -Wall -Werror -MMD -fno-builtin -fno-stack-protector -I$$($(1)_INC_DIR) $(2)
$(1)_LDFLAGS := -nostdlib $(3)

$$($(1)_OBJ_DIR)%.o: $$($(1)_SRC_DIR)%.c
	@$$(call compile_rules, $$(@D), $$<, $$@, $$($(1)_CFLAGS))

$$($(1)_OBJ_DIR)%.o: $$($(1)_SRC_DIR)%.S
	@$$(call compile_rules, $$(@D), $$<, $$@, $$($(1)_CFLAGS))

$$($(1)_BIN): $$($(1)_OBJS) $(4)
	@mkdir -p $$(@D)
ifeq ($(7),)
	@$(LD) $$($(1)_OBJS) $(4) -o $$@ $$($(1)_LDFLAGS)
	@$(6)
else
	@$(7)
endif

.PHONY: $(1)-asm $(1)-elf clean-$(1)

$(1)-asm:$$($(1)_BIN)
	@objdump -d $$($(1)_BIN) > $$($(1)_BIN).S
	@vim $$($(1)_BIN).S

$(1)-elf:$$($(1)_BIN)
	@readelf -a $$($(1)_BIN) > $$($(1)_BIN).elf
	@vim $$($(1)_BIN).elf

clean-$(1):
	@rm -rf $$($(1)_OBJ_DIR)

-include $$($(1)_OBJS:.o=.d)
endef
